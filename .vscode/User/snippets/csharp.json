{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Main": {
		"prefix": "main",
		"body": [
			"using System;",
			"using System.Linq;",
			"using System.Collections.Generic;",
			"using static System.Console;",
			"",
			"class P",
			"{",
			"\tstatic void Main()",
			"\t{",
			"\t\t$1",
			"\t}",
			"}",
		],
		"description": "Main function"
	},
	"Console.": {
		"prefix": "c.",
		"body": [
			"Console.",
		],
		"description": "Console."
	},
	"Value assignment": {
		"prefix": "var",
		"body": [
			"${1:var} ${2:a} = $3",
		],
		"description": "Value assignment"
	},
	"Int Parse": {
		"prefix": [
			"ip",
			"int",
		],
		"body": [
			"int.Parse($1)",
		],
		"description": "Int parse"
	},
	"Console.Write": {
		"prefix": "write",
		"body": [
			"${1:Console.}Write($2)",
		],
		"description": "Console.Write"
	},
	"Console.WriteLine": {
		"prefix": "cw",
		"body": [
			"${1:Console.}WriteLine($2)",
		],
		"description": "Console.WriteLine"
	},
	"Console.ReadLine": {
		"prefix": "cr",
		"body": [
			"${1:Console.}ReadLine()",
		],
		"description": "Console.ReadLine"
	},
	"ReadLine Template": {
		"prefix": "rt",
		"body": [
			"static string ReadSt() { return Console.ReadLine(); }",
			"static int ReadInt() { return int.Parse(Console.ReadLine()); }",
			"static long ReadLong() { return long.Parse(Console.ReadLine()); }",
			"static double ReadDouble() { return double.Parse(Console.ReadLine()); }",
			"static string[] ReadStAr(char sep = ' ') { return Console.ReadLine().Split(sep); }",
			"static int[] ReadIntAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Split(sep), e => int.Parse(e)); }",
			"static long[] ReadLongAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Split(sep), e => long.Parse(e)); }",
			"static double[] ReadDoubleAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Split(sep), e => double.Parse(e)); }",
		],
		"description": "ReadLine Template"
	},
	"Array.ConvertAll": {
		"prefix": "aca",
		"body": [
			"Array.ConvertAll(${1:Console.}ReadLine().Split(), int.Parse)",
		],
		"description": "Array.ConvertAll"
	},
	"Read Int Numbers": {
		"prefix": "cri",
		"body": [
			"${1:Console.}ReadLine().Split().Select(int.Parse)",
		],
		"description": "Read int numbers"
	},
	"Read Int Array": {
		"prefix": "cria",
		"body": [
			"${1:Console.}ReadLine().Split().Select(int.Parse).ToArray()",
		],
		"description": "Read int array"
	},
	"Read Int List": {
		"prefix": "cril",
		"body": [
			"${1:Console.}ReadLine().Split().Select(int.Parse).ToList()",
		],
		"description": "Read int list"
	},
	"Split": {
		"prefix": ".split",
		"body": [
			".Split()",
		],
		"description": "Split"
	},
	"Func": {
		"prefix": "func",
		"body": [
			"Func<${1:int[]}> ${2:R} = () => ${3:Array.ConvertAll(Console.ReadLine().Split(), int.Parse);}",
		],
		"description": "Func"
	},
	"Product": {
		"prefix": ".prod",
		"body": [
			".Aggregate((${1:now}, ${2:next}) => ${1:now} * ${2:next})",
		],
		"description": "Product"
	},
	"Tuple": {
		"prefix": "tuple",
		"body": [
			"(${1:int }${2:a}, ${1:int }${3:b})",
		],
		"description": "Tuple"
	},
	"string.Join": {
		"prefix": "join",
		"body": [
			"string.Join(\" \", $1)",
		],
		"description": "string.Join"
	},
}
