[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_post_source = '''
  " Denite用プレフィックス
  nmap [denite] <Nop>
  map <C-j> [denite]

  " プロジェクト内のファイル検索
  nmap <silent> [denite]<C-P> :<C-u>Denite file_rec -highlight-mode-insert=Search<CR>
  " バッファに展開中のファイル検索
  nmap <silent> [denite]<C-B> :<C-u>Denite buffer -highlight-mode-insert=Search<CR>
  " ファイル内の関数/クラス等の検索
  nmap <silent> [denite]<C-O> :<C-u>Denite outline -highlight-mode-insert=Search<CR>
  " dotfiles配下をカレントにしてfile_rec起動
  nmap <silent> [denite]<C-V> :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/.dotfiles']}]) -highlight-mode-insert=Search=Search<CR>

  " 上下移動を<C-N>, <C-P>
  call denite#custom#map('normal', '<C-N>', '<denite:move_to_next_line>')
  call denite#custom#map('normal', '<C-P>', '<denite:move_to_previous_line>')
  call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>')
  call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>')
  " 入力履歴移動を<C-J>, <C-K>
  call denite#custom#map('insert', '<C-J>', '<denite:assign_next_text>')
  call denite#custom#map('insert', '<C-K>', '<denite:assign_previous_text>')
  " 横割りオープンを`<C-S>`
  call denite#custom#map('insert', '<C-S>', '<denite:do_action:split>')
  " 縦割りオープンを`<C-I>`
  call denite#custom#map('insert', '<C-I>', '<denite:do_action:vsplit>')
  " タブオープンを`<C-O>`
  call denite#custom#map('insert', '<C-O>', '<denite:do_action:tabopen>')

  " file_rec検索時にfuzzymatchを有効にし、検索対象から指定のファイルを除外
  call denite#custom#source(
      \ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_project_files', 'matcher_ignore_globs'])

  " 検索対象外のファイル指定
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'

[[plugins]]
repo = 'davidhalter/jedi-vim'
hook_add = '''
  " 勝手にキーバインド設定やら自動補完などをやるので潰しておく
  let g:jedi#auto_initialization = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#completions_enabled = 0
  " コード参照のキーバインドを登録
  let g:jedi#goto_command = "<Leader>d"
'''

[[plugins]]
repo = 'plytophogy/vim-virtualenv'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'Shougo/vimproc.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  " vimprocで非同期実行
  " 成功時にバッファ、失敗時にQuickFixで表示
  " 結果表示のサイズ調整など
  let g:quickrun_config = {
      \ '_' : {
          \ 'runner' : 'vimproc',
          \ 'runner/vimproc/updatetime' : 40,
          \ 'outputter' : 'error',
          \ 'outputter/error/success' : 'buffer',
          \ 'outputter/error/error'   : 'quickfix',
          \ 'outputter/buffer/split' : ':botright 8sp',
      \ }
  \}

  " 実行時に前回の表示内容をクローズ&保存してから実行
  let g:quickrun_no_default_key_mappings = 1
  nmap <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" エラー行に表示するマーク
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '⚠'
  " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1

  " ファイルを開いたときにlint実行
  let g:ale_lint_on_enter = 1
  " ファイルを保存したときにlint実行
  let g:ale_lint_on_save = 1
  " 編集中のlintはしない
  let g:ale_lint_on_text_changed = 'never'

  " lint結果をロケーションリストとQuickFixには表示しない
  " 出てると結構うざいしQuickFixを書き換えられるのは困る
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  " 有効にするlinter
  let g:ale_linters = {
  \   'python': ['flake8'],
  \}

  " ALE用プレフィックス
  nmap [ale] <Nop>
  map <C-k> [ale]
  " エラー行にジャンプ
  nmap <silent> [ale]<C-P> <Plug>(ale_previous)
  nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
