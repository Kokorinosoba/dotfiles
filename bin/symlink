#!/bin/bash

readonly DOTDIR=$(realpath $0 | sed -e 's/\(.*dotfiles\).*/\1/')
cd $DOTDIR

usage() {
  echo "Usage: ${0##*/} [<option>]"
  echo "Options:"
  echo '    -d         delete symlinks at $HOME dotfiles which exist in "dotfiles" dir'
  echo '    -f         make symlinks at $HOME by force'
  echo '    -i         make symlinks at $HOME interactively'
  echo ""
  exit 1
}

mklink() {
  local dotfile=$1
  if [[ -e $HOME/$dotfile ]]; then
    echo "Failed to create symlink to \$HOME/$dotfile"
  else
    ln -s $DOTDIR/$dotfile $HOME &&
    echo "Created symlink to \$HOME/$dotfile"
  fi
}

oplink() {
  local opt=$1
  local dotfile=$2
  ln -s $opt $DOTDIR/$dotfile $HOME &&
  [[ $opt = -f ]] && echo "Created symlink to \$HOME/$dotfile"
}

rmlink() {
  local dotfile=$1
  if [[ -e $HOME/$dotfile ]]; then
    unlink $HOME/$dotfile &&
    echo "Deleted symlink \$HOME/$dotfile"
  fi
}

func="mklink"
while getopts fdih opt &> /dev/null
do
  case $opt in
    d ) func="rmlink" ;;
    f ) func="oplink -f" ;;
    i ) func="oplink -i" ;;
    h ) usage ;;
    \? ) usage ;;
  esac
done

shift $((OPTIND - 1))

for dotfile in .??*
do
  [[ $dotfile == .git ]] && continue
  [[ $dotfile == .gitignore ]] && continue
  [[ $dotfile == .gitmodules ]] && continue
  [[ $dotfile == .DS_Store ]] && continue

  $func $dotfile
done

exit 0
